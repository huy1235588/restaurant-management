services:
    # PostgreSQL Database
    postgres:
        image: postgres:16-alpine
        container_name: restaurant_postgres_dev
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-restaurant_admin}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-restaurant_password}
            POSTGRES_DB: ${POSTGRES_DB:-restaurant_db}
        volumes:
            - postgres_dev_data:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_PORT:-5432}:5432"
        networks:
            - restaurant_network_dev
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-restaurant_admin}"]
            interval: 10s
            timeout: 5s
            retries: 5

    # Redis Cache
    redis:
        image: redis:7-alpine
        container_name: restaurant_redis_dev
        restart: unless-stopped
        ports:
            - "${REDIS_PORT:-6379}:6379"
        networks:
            - restaurant_network_dev

    # Backend Server (Development with hot reload)
    server:
        build:
            context: ./apps/server
            dockerfile: Dockerfile.dev
            target: development
        container_name: restaurant_server_dev
        restart: unless-stopped
        environment:
            NODE_ENV: development
            PORT: ${SERVER_PORT:-5000}
            DATABASE_URL: postgresql://${POSTGRES_USER:-restaurant_admin}:${POSTGRES_PASSWORD:-restaurant_password}@postgres:5432/${POSTGRES_DB:-restaurant_db}?schema=public
            JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
            JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
            JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
            CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
            API_VERSION: ${API_VERSION:-v1}
            API_BASE_URL: ${API_BASE_URL:-http://localhost:5000}
            REDIS_URL: redis://redis:6379
        ports:
            - "${SERVER_PORT:-5000}:5000"
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        networks:
            - restaurant_network_dev
        volumes:
            - ./apps/server/src:/app/src
            - ./apps/server/prisma:/app/prisma
            - ./apps/server/logs:/app/logs

    # Frontend Client (Development with hot reload)
    client:
        build:
            context: ./apps/client
            dockerfile: Dockerfile.dev
            target: development
        container_name: restaurant_client_dev
        restart: unless-stopped
        environment:
            NODE_ENV: development
            NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000/api/v1}
            NEXT_PUBLIC_SOCKET_URL: ${NEXT_PUBLIC_SOCKET_URL:-http://localhost:5000}
        ports:
            - "${CLIENT_PORT:-3000}:3000"
        depends_on:
            - server
        networks:
            - restaurant_network_dev
        volumes:
            - ./apps/client/src:/app/src
            - ./apps/client/public:/app/public
            - ./apps/client/locales:/app/locales
            - /app/node_modules
            - /app/.next

volumes:
    postgres_dev_data:
        driver: local

networks:
    restaurant_network_dev:
        driver: bridge
