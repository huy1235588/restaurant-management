services:
    # PostgreSQL Database
    postgres:
        image: postgres:16-alpine
        container_name: restaurant_postgres
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-restaurant_admin}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-restaurant_password}
            POSTGRES_DB: ${POSTGRES_DB:-restaurant_db}
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_PORT:-5432}:5432"
        networks:
            - restaurant_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-restaurant_admin} -d ${POSTGRES_DB:-restaurant_db}"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    # Redis Cache
    redis:
        image: redis:7-alpine
        container_name: restaurant_redis
        restart: unless-stopped
        command: redis-server --appendonly yes
        ports:
            - "${REDIS_PORT:-6379}:6379"
        volumes:
            - redis_data:/data
        networks:
            - restaurant_network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 5s

    # Backend Server
    server:
        build:
            context: ./apps/server
            dockerfile: Dockerfile
            cache_from:
                - restaurant_server:latest
        container_name: restaurant_server
        restart: unless-stopped
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            PORT: ${SERVER_PORT:-5000}
            DATABASE_URL: postgresql://${POSTGRES_USER:-restaurant_admin}:${POSTGRES_PASSWORD:-restaurant_password}@postgres:5432/${POSTGRES_DB:-restaurant_db}?schema=public&connect_timeout=10&pool_timeout=10
            JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
            JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
            JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
            CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
            API_VERSION: ${API_VERSION:-v1}
            API_BASE_URL: ${API_BASE_URL:-http://localhost:5000}
            REDIS_URL: redis://redis:6379
        ports:
            - "${SERVER_PORT:-5000}:5000"
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - restaurant_network
        volumes:
            - ./apps/server/logs:/app/logs

    # Frontend Client
    client:
        build:
            context: ./apps/client
            dockerfile: Dockerfile
            cache_from:
                - restaurant_client:latest
            args:
                NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
                NEXT_PUBLIC_SOCKET_URL: ${NEXT_PUBLIC_SOCKET_URL:-http://localhost:5000}
        container_name: restaurant_client
        restart: unless-stopped
        environment:
            NODE_ENV: ${NODE_ENV:-production}
            NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
            NEXT_PUBLIC_SOCKET_URL: ${NEXT_PUBLIC_SOCKET_URL:-http://localhost:5000}
        ports:
            - "${CLIENT_PORT:-3000}:3000"
        depends_on:
            - server
        networks:
            - restaurant_network

    # Nginx Reverse Proxy (Optional - use with --profile nginx)
    nginx:
        image: nginx:alpine
        container_name: restaurant_nginx
        restart: unless-stopped
        ports:
            - "${NGINX_HTTP_PORT:-80}:80"
            - "${NGINX_HTTPS_PORT:-443}:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/ssl:/etc/nginx/ssl:ro
        depends_on:
            - client
            - server
        networks:
            - restaurant_network
        healthcheck:
            test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
            interval: 30s
            timeout: 10s
            retries: 3
        profiles:
            - nginx

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local

networks:
    restaurant_network:
        driver: bridge
