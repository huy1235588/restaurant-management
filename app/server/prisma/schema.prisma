// Restaurant Management System - PostgreSQL Database Schema
// Redesigned from scratch with best practices

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum Role {
    admin
    manager
    waiter
    chef
    cashier
}

enum TableStatus {
    available
    occupied
    reserved
    maintenance
}

enum OrderStatus {
    pending
    confirmed
    preparing
    ready
    served
    cancelled
}

enum PaymentStatus {
    pending
    paid
    refunded
    cancelled
}

enum PaymentMethod {
    cash
    card
    momo
    bank_transfer
}

enum ReservationStatus {
    pending
    confirmed
    seated
    completed
    cancelled
    no_show
}

enum TransactionType {
    in
    out
    adjustment
    waste
}

enum PurchaseOrderStatus {
    pending
    ordered
    received
    cancelled
}

enum StockAlertType {
    low_stock
    expiring_soon
    expired
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model Account {
    accountId   Int       @id @default(autoincrement())
    username    String    @unique @db.VarChar(50)
    email       String    @unique @db.VarChar(255)
    phoneNumber String    @unique @db.VarChar(20)
    password    String    @db.VarChar(255)
    isActive    Boolean   @default(true)
    lastLogin   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    staff         Staff?
    refreshTokens RefreshToken[]

    @@index([email])
    @@index([username])
    @@map("accounts")
}

model RefreshToken {
    tokenId    Int       @id @default(autoincrement())
    accountId  Int
    token      String    @unique @db.Text
    expiresAt  DateTime
    deviceInfo String?   @db.VarChar(500)
    ipAddress  String?   @db.VarChar(45)
    isRevoked  Boolean   @default(false)
    createdAt  DateTime  @default(now())
    revokedAt  DateTime?

    account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

    @@index([accountId])
    @@index([token])
    @@index([expiresAt])
    @@map("refresh_tokens")
}

model Staff {
    staffId     Int       @id @default(autoincrement())
    accountId   Int       @unique
    fullName    String    @db.VarChar(255)
    address     String?   @db.VarChar(500)
    dateOfBirth DateTime? @db.Date
    hireDate    DateTime  @default(now()) @db.Date
    salary      Decimal?  @db.Decimal(12, 2)
    role        Role
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    account           Account            @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
    orders            Order[]
    bills             Bill[]
    kitchenOrders     KitchenOrder[]
    purchaseOrders    PurchaseOrder[]
    stockTransactions StockTransaction[]
    resolvedAlerts    StockAlert[]

    @@index([role])
    @@index([isActive])
    @@map("staff")
}

// ============================================
// MENU & CATEGORY MANAGEMENT
// ============================================

model Category {
    categoryId   Int      @id @default(autoincrement())
    categoryName String   @unique @db.VarChar(100)
    description  String?  @db.VarChar(500)
    displayOrder Int      @default(0)
    isActive     Boolean  @default(true)
    imageUrl     String?  @db.VarChar(500)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    menuItems MenuItem[]

    @@index([isActive])
    @@map("categories")
}

model MenuItem {
    itemId          Int      @id @default(autoincrement())
    itemCode        String   @unique @db.VarChar(20)
    itemName        String   @db.VarChar(100)
    categoryId      Int
    price           Decimal  @db.Decimal(10, 2)
    cost            Decimal? @db.Decimal(10, 2)
    description     String?  @db.VarChar(1000)
    imageUrl        String?  @db.VarChar(500)
    isAvailable     Boolean  @default(true)
    isActive        Boolean  @default(true)
    preparationTime Int? // in minutes
    spicyLevel      Int?     @default(0) // 0-5
    isVegetarian    Boolean  @default(false)
    calories        Int?
    displayOrder    Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    category   Category    @relation(fields: [categoryId], references: [categoryId], onDelete: Restrict)
    orderItems OrderItem[]
    billItems  BillItem[]
    recipes    Recipe[]

    @@index([categoryId])
    @@index([isAvailable])
    @@index([isActive])
    @@map("menu_items")
}

// ============================================
// TABLE MANAGEMENT
// ============================================

model RestaurantTable {
    tableId     Int         @id @default(autoincrement())
    tableNumber String      @unique @db.VarChar(20)
    tableName   String?     @db.VarChar(50)
    capacity    Int
    minCapacity Int         @default(1)
    floor       Int         @default(1)
    section     String?     @db.VarChar(50) // VIP, Garden, Indoor, Outdoor
    status      TableStatus @default(available)
    qrCode      String?     @unique @db.VarChar(255)
    isActive    Boolean     @default(true)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    reservations Reservation[]
    orders       Order[]
    bills        Bill[]

    @@index([status])
    @@index([floor])
    @@index([isActive])
    @@map("restaurant_tables")
}

// ============================================
// RESERVATION MANAGEMENT
// ============================================

model Reservation {
    reservationId   Int               @id @default(autoincrement())
    reservationCode String            @unique @default(uuid()) @db.VarChar(50)
    customerName    String            @db.VarChar(255)
    phoneNumber     String            @db.VarChar(20)
    email           String?           @db.VarChar(255)
    tableId         Int
    reservationDate DateTime          @db.Date
    reservationTime DateTime          @db.Time(0)
    duration        Int               @default(120) // minutes
    headCount       Int
    specialRequest  String?           @db.Text
    depositAmount   Decimal?          @db.Decimal(10, 2)
    status          ReservationStatus @default(pending)
    notes           String?           @db.Text
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    table  RestaurantTable @relation(fields: [tableId], references: [tableId], onDelete: Restrict)
    orders Order[]

    @@index([reservationDate])
    @@index([status])
    @@index([phoneNumber])
    @@index([tableId])
    @@map("reservations")
}

// ============================================
// ORDER MANAGEMENT
// ============================================

model Order {
    orderId       Int         @id @default(autoincrement())
    orderNumber   String      @unique @default(uuid()) @db.VarChar(50)
    tableId       Int
    staffId       Int? // waiter who took the order
    reservationId Int?
    customerName  String?     @db.VarChar(255)
    customerPhone String?     @db.VarChar(20)
    headCount     Int         @default(1)
    status        OrderStatus @default(pending)
    notes         String?     @db.Text
    orderTime     DateTime    @default(now())
    confirmedAt   DateTime?
    completedAt   DateTime?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    table         RestaurantTable @relation(fields: [tableId], references: [tableId], onDelete: Restrict)
    staff         Staff?          @relation(fields: [staffId], references: [staffId], onDelete: SetNull)
    reservation   Reservation?    @relation(fields: [reservationId], references: [reservationId], onDelete: SetNull)
    orderItems    OrderItem[]
    kitchenOrders KitchenOrder[]
    bill          Bill?

    @@index([orderNumber])
    @@index([tableId])
    @@index([status])
    @@index([orderTime])
    @@map("orders")
}

model OrderItem {
    orderItemId    Int         @id @default(autoincrement())
    orderId        Int
    itemId         Int
    quantity       Int
    unitPrice      Decimal     @db.Decimal(10, 2)
    subtotal       Decimal     @db.Decimal(10, 2)
    specialRequest String?     @db.VarChar(500)
    status         OrderStatus @default(pending)
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt

    order    Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
    menuItem MenuItem @relation(fields: [itemId], references: [itemId], onDelete: Restrict)

    @@index([orderId])
    @@index([itemId])
    @@index([status])
    @@map("order_items")
}

// ============================================
// KITCHEN MANAGEMENT
// ============================================

model KitchenOrder {
    kitchenOrderId Int         @id @default(autoincrement())
    orderId        Int
    staffId        Int? // chef assigned
    priority       Int         @default(0)
    status         OrderStatus @default(pending)
    startedAt      DateTime?
    completedAt    DateTime?
    estimatedTime  Int? // minutes
    notes          String?     @db.Text
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt

    order Order  @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
    chef  Staff? @relation(fields: [staffId], references: [staffId], onDelete: SetNull)

    @@index([orderId])
    @@index([status])
    @@index([priority])
    @@map("kitchen_orders")
}

// ============================================
// BILLING & PAYMENT
// ============================================

model Bill {
    billId         Int            @id @default(autoincrement())
    billNumber     String         @unique @default(uuid()) @db.VarChar(50)
    orderId        Int            @unique
    tableId        Int
    staffId        Int? // cashier
    subtotal       Decimal        @db.Decimal(12, 2)
    taxAmount      Decimal        @default(0) @db.Decimal(12, 2)
    taxRate        Decimal        @default(0) @db.Decimal(5, 2) // percentage
    discountAmount Decimal        @default(0) @db.Decimal(12, 2)
    serviceCharge  Decimal        @default(0) @db.Decimal(12, 2)
    totalAmount    Decimal        @db.Decimal(12, 2)
    paidAmount     Decimal        @default(0) @db.Decimal(12, 2)
    changeAmount   Decimal        @default(0) @db.Decimal(12, 2)
    paymentStatus  PaymentStatus  @default(pending)
    paymentMethod  PaymentMethod?
    notes          String?        @db.Text
    createdAt      DateTime       @default(now())
    paidAt         DateTime?
    updatedAt      DateTime       @updatedAt

    order     Order           @relation(fields: [orderId], references: [orderId], onDelete: Restrict)
    table     RestaurantTable @relation(fields: [tableId], references: [tableId], onDelete: Restrict)
    staff     Staff?          @relation(fields: [staffId], references: [staffId], onDelete: SetNull)
    billItems BillItem[]
    payments  Payment[]

    @@index([billNumber])
    @@index([orderId])
    @@index([paymentStatus])
    @@index([createdAt])
    @@map("bills")
}

model BillItem {
    billItemId Int      @id @default(autoincrement())
    billId     Int
    itemId     Int
    itemName   String   @db.VarChar(100)
    quantity   Int
    unitPrice  Decimal  @db.Decimal(10, 2)
    subtotal   Decimal  @db.Decimal(10, 2)
    discount   Decimal  @default(0) @db.Decimal(10, 2)
    total      Decimal  @db.Decimal(10, 2)
    createdAt  DateTime @default(now())

    bill     Bill     @relation(fields: [billId], references: [billId], onDelete: Cascade)
    menuItem MenuItem @relation(fields: [itemId], references: [itemId], onDelete: Restrict)

    @@index([billId])
    @@map("bill_items")
}

model Payment {
    paymentId      Int           @id @default(autoincrement())
    billId         Int
    paymentMethod  PaymentMethod
    amount         Decimal       @db.Decimal(12, 2)
    transactionId  String?       @db.VarChar(100)
    cardNumber     String?       @db.VarChar(20) // last 4 digits only
    cardHolderName String?       @db.VarChar(255)
    status         PaymentStatus @default(pending)
    notes          String?       @db.Text
    paymentDate    DateTime      @default(now())
    createdAt      DateTime      @default(now())

    bill Bill @relation(fields: [billId], references: [billId], onDelete: Cascade)

    @@index([billId])
    @@index([transactionId])
    @@map("payments")
}

// ============================================
// INVENTORY MANAGEMENT
// ============================================

model IngredientCategory {
    categoryId   Int      @id @default(autoincrement())
    categoryName String   @unique @db.VarChar(100)
    description  String?  @db.Text
    isActive     Boolean  @default(true)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    ingredients Ingredient[]

    @@index([isActive])
    @@map("ingredient_categories")
}

model Ingredient {
    ingredientId   Int      @id @default(autoincrement())
    ingredientCode String   @unique @db.VarChar(20)
    ingredientName String   @db.VarChar(100)
    unit           String   @db.VarChar(20) // kg, g, lít, ml, etc.
    categoryId     Int?
    minimumStock   Decimal  @default(0) @db.Decimal(10, 2)
    currentStock   Decimal  @default(0) @db.Decimal(10, 2)
    unitCost       Decimal? @db.Decimal(10, 2)
    isActive       Boolean  @default(true)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    category           IngredientCategory? @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
    recipes            Recipe[]
    stockTransactions  StockTransaction[]
    batches            IngredientBatch[]
    stockAlerts        StockAlert[]
    purchaseOrderItems PurchaseOrderItem[]

    @@index([categoryId])
    @@index([isActive])
    @@map("ingredients")
}

model Recipe {
    recipeId     Int      @id @default(autoincrement())
    itemId       Int
    ingredientId Int
    quantity     Decimal  @db.Decimal(10, 3) // Số lượng nguyên liệu cần
    unit         String   @db.VarChar(20)
    notes        String?  @db.Text
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    menuItem   MenuItem   @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
    ingredient Ingredient @relation(fields: [ingredientId], references: [ingredientId], onDelete: Restrict)

    @@unique([itemId, ingredientId])
    @@index([itemId])
    @@index([ingredientId])
    @@map("recipes")
}

model Supplier {
    supplierId    Int      @id @default(autoincrement())
    supplierCode  String   @unique @db.VarChar(20)
    supplierName  String   @db.VarChar(255)
    contactPerson String?  @db.VarChar(255)
    phoneNumber   String?  @db.VarChar(20)
    email         String?  @db.VarChar(255)
    address       String?  @db.Text
    taxCode       String?  @db.VarChar(50)
    paymentTerms  String?  @db.VarChar(100)
    isActive      Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    purchaseOrders PurchaseOrder[]

    @@index([isActive])
    @@map("suppliers")
}

model PurchaseOrder {
    purchaseOrderId Int                 @id @default(autoincrement())
    orderNumber     String              @unique @default(uuid()) @db.VarChar(50)
    supplierId      Int
    staffId         Int?
    orderDate       DateTime            @default(now())
    expectedDate    DateTime?           @db.Date
    receivedDate    DateTime?
    status          PurchaseOrderStatus @default(pending)
    subtotal        Decimal             @db.Decimal(12, 2)
    taxAmount       Decimal             @default(0) @db.Decimal(12, 2)
    totalAmount     Decimal             @db.Decimal(12, 2)
    notes           String?             @db.Text
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt

    supplier Supplier            @relation(fields: [supplierId], references: [supplierId], onDelete: Restrict)
    staff    Staff?              @relation(fields: [staffId], references: [staffId], onDelete: SetNull)
    items    PurchaseOrderItem[]
    batches  IngredientBatch[]

    @@index([orderNumber])
    @@index([supplierId])
    @@index([status])
    @@index([orderDate])
    @@map("purchase_orders")
}

model PurchaseOrderItem {
    itemId           Int      @id @default(autoincrement())
    purchaseOrderId  Int
    ingredientId     Int
    quantity         Decimal  @db.Decimal(10, 2)
    unit             String   @db.VarChar(20)
    unitPrice        Decimal  @db.Decimal(10, 2)
    subtotal         Decimal  @db.Decimal(10, 2)
    receivedQuantity Decimal  @default(0) @db.Decimal(10, 2)
    createdAt        DateTime @default(now())

    purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [purchaseOrderId], onDelete: Cascade)
    ingredient    Ingredient    @relation(fields: [ingredientId], references: [ingredientId], onDelete: Restrict)

    @@index([purchaseOrderId])
    @@index([ingredientId])
    @@map("purchase_order_items")
}

model StockTransaction {
    transactionId   Int             @id @default(autoincrement())
    ingredientId    Int
    transactionType TransactionType
    quantity        Decimal         @db.Decimal(10, 2)
    unit            String          @db.VarChar(20)
    referenceType   String?         @db.VarChar(50) // purchase_order, order, adjustment
    referenceId     Int?
    staffId         Int?
    notes           String?         @db.Text
    transactionDate DateTime        @default(now())
    createdAt       DateTime        @default(now())

    ingredient Ingredient @relation(fields: [ingredientId], references: [ingredientId], onDelete: Restrict)
    staff      Staff?     @relation(fields: [staffId], references: [staffId], onDelete: SetNull)

    @@index([ingredientId])
    @@index([transactionType])
    @@index([transactionDate])
    @@map("stock_transactions")
}

model IngredientBatch {
    batchId           Int       @id @default(autoincrement())
    ingredientId      Int
    purchaseOrderId   Int?
    batchNumber       String    @db.VarChar(50)
    quantity          Decimal   @db.Decimal(10, 2)
    remainingQuantity Decimal   @db.Decimal(10, 2)
    unit              String    @db.VarChar(20)
    unitCost          Decimal?  @db.Decimal(10, 2)
    expiryDate        DateTime? @db.Date
    receivedDate      DateTime  @db.Date
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt

    ingredient    Ingredient     @relation(fields: [ingredientId], references: [ingredientId], onDelete: Restrict)
    purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [purchaseOrderId], onDelete: SetNull)

    @@index([ingredientId])
    @@index([purchaseOrderId])
    @@index([expiryDate])
    @@map("ingredient_batches")
}

model StockAlert {
    alertId      Int            @id @default(autoincrement())
    ingredientId Int
    alertType    StockAlertType
    message      String         @db.Text
    isResolved   Boolean        @default(false)
    resolvedAt   DateTime?
    resolvedBy   Int?
    createdAt    DateTime       @default(now())

    ingredient Ingredient @relation(fields: [ingredientId], references: [ingredientId], onDelete: Cascade)
    resolver   Staff?     @relation(fields: [resolvedBy], references: [staffId], onDelete: SetNull)

    @@index([ingredientId])
    @@index([alertType])
    @@index([isResolved])
    @@map("stock_alerts")
}
