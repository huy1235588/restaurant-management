import type { Options } from 'swagger-jsdoc';
const swaggerJsdoc = require('swagger-jsdoc');
import config from './index';

const swaggerOptions: Options = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'Restaurant Management System API',
            version: '1.0.0',
            description: 'API documentation for Restaurant Management System',
            contact: {
                name: 'API Support',
                email: 'support@restaurant.com',
            },
        },
        servers: [
            {
                url: `${config.apiBaseUrl}/api/${config.apiVersion}`,
                description: 'Development server',
            },
            {
                url: `https://api.restaurant.com/api/${config.apiVersion}`,
                description: 'Production server',
            },
        ],
        components: {
            securitySchemes: {
                bearerAuth: {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT',
                    description: 'JWT Authorization header using the Bearer scheme',
                },
            },
            schemas: {
                // Enums
                Role: {
                    type: 'string',
                    enum: ['admin', 'manager', 'waiter', 'chef', 'bartender', 'cashier'],
                    description: 'Staff role in the restaurant',
                },
                TableStatus: {
                    type: 'string',
                    enum: ['available', 'occupied', 'reserved', 'maintenance'],
                    description: 'Status of a restaurant table',
                },
                OrderStatus: {
                    type: 'string',
                    enum: ['pending', 'confirmed', 'preparing', 'ready', 'served', 'cancelled'],
                    description: 'Status of an order',
                },
                PaymentStatus: {
                    type: 'string',
                    enum: ['pending', 'paid', 'refunded', 'cancelled'],
                    description: 'Status of a payment',
                },
                PaymentMethod: {
                    type: 'string',
                    enum: ['cash', 'card', 'momo', 'bank_transfer'],
                    description: 'Payment method used',
                },
                ReservationStatus: {
                    type: 'string',
                    enum: ['pending', 'confirmed', 'seated', 'completed', 'cancelled', 'no_show'],
                    description: 'Status of a reservation',
                },
                TransactionType: {
                    type: 'string',
                    enum: ['in', 'out', 'adjustment', 'waste'],
                    description: 'Type of stock transaction',
                },
                PurchaseOrderStatus: {
                    type: 'string',
                    enum: ['pending', 'ordered', 'received', 'cancelled'],
                    description: 'Status of a purchase order',
                },
                StockAlertType: {
                    type: 'string',
                    enum: ['low_stock', 'expiring_soon', 'expired'],
                    description: 'Type of stock alert',
                },
                // API Response Types
                ApiResponse: {
                    type: 'object',
                    properties: {
                        success: {
                            type: 'boolean',
                            description: 'Indicates if the request was successful',
                        },
                        message: {
                            type: 'string',
                            description: 'Response message',
                        },
                        data: {
                            description: 'Response data',
                        },
                        error: {
                            description: 'Error details if any',
                        },
                    },
                    required: ['success', 'message'],
                },
                PaginatedResponse: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'array',
                            items: {},
                            description: 'Array of items',
                        },
                        pagination: {
                            type: 'object',
                            properties: {
                                page: {
                                    type: 'integer',
                                    description: 'Current page number',
                                },
                                limit: {
                                    type: 'integer',
                                    description: 'Number of items per page',
                                },
                                total: {
                                    type: 'integer',
                                    description: 'Total number of items',
                                },
                                totalPages: {
                                    type: 'integer',
                                    description: 'Total number of pages',
                                },
                            },
                            required: ['page', 'limit', 'total', 'totalPages'],
                        },
                    },
                    required: ['data', 'pagination'],
                },
                PaginationParams: {
                    type: 'object',
                    properties: {
                        page: {
                            type: 'integer',
                            minimum: 1,
                            default: 1,
                            description: 'Page number',
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 10,
                            description: 'Number of items per page',
                        },
                        sortBy: {
                            type: 'string',
                            description: 'Field to sort by',
                        },
                        sortOrder: {
                            type: 'string',
                            enum: ['asc', 'desc'],
                            default: 'asc',
                            description: 'Sort order',
                        },
                    },
                },
                // Entity Models
                Account: {
                    type: 'object',
                    properties: {
                        accountId: { type: 'integer', description: 'Unique account ID' },
                        username: { type: 'string', description: 'Username' },
                        email: { type: 'string', format: 'email', description: 'Email address' },
                        phoneNumber: { type: 'string', description: 'Phone number' },
                        password: { type: 'string', description: 'Password (not returned in responses)' },
                        isActive: { type: 'boolean', description: 'Account active status' },
                        lastLogin: { type: 'string', format: 'date-time', nullable: true, description: 'Last login timestamp' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Account creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Account update timestamp' },
                    },
                    required: ['accountId', 'username', 'email', 'phoneNumber', 'isActive', 'createdAt', 'updatedAt'],
                },
                Staff: {
                    type: 'object',
                    properties: {
                        staffId: { type: 'integer', description: 'Unique staff ID' },
                        accountId: { type: 'integer', description: 'Associated account ID' },
                        fullName: { type: 'string', description: 'Full name' },
                        address: { type: 'string', nullable: true, description: 'Address' },
                        dateOfBirth: { type: 'string', format: 'date', nullable: true, description: 'Date of birth' },
                        hireDate: { type: 'string', format: 'date', description: 'Hire date' },
                        salary: { type: 'number', format: 'decimal', nullable: true, description: 'Salary' },
                        role: { $ref: '#/components/schemas/Role' },
                        isActive: { type: 'boolean', description: 'Staff active status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['staffId', 'accountId', 'fullName', 'hireDate', 'role', 'isActive', 'createdAt', 'updatedAt'],
                },
                Category: {
                    type: 'object',
                    properties: {
                        categoryId: { type: 'integer', description: 'Unique category ID' },
                        categoryName: { type: 'string', description: 'Category name' },
                        description: { type: 'string', nullable: true, description: 'Category description' },
                        displayOrder: { type: 'integer', description: 'Display order' },
                        isActive: { type: 'boolean', description: 'Category active status' },
                        imageUrl: { type: 'string', nullable: true, description: 'Image URL' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['categoryId', 'categoryName', 'displayOrder', 'isActive', 'createdAt', 'updatedAt'],
                },
                MenuItem: {
                    type: 'object',
                    properties: {
                        itemId: { type: 'integer', description: 'Unique menu item ID' },
                        itemCode: { type: 'string', description: 'Item code' },
                        itemName: { type: 'string', description: 'Item name' },
                        categoryId: { type: 'integer', description: 'Category ID' },
                        price: { type: 'number', format: 'decimal', description: 'Item price' },
                        cost: { type: 'number', format: 'decimal', nullable: true, description: 'Item cost' },
                        description: { type: 'string', nullable: true, description: 'Item description' },
                        imageUrl: { type: 'string', nullable: true, description: 'Image URL' },
                        isAvailable: { type: 'boolean', description: 'Availability status' },
                        isActive: { type: 'boolean', description: 'Active status' },
                        preparationTime: { type: 'integer', nullable: true, description: 'Preparation time in minutes' },
                        spicyLevel: { type: 'integer', nullable: true, description: 'Spicy level (0-5)' },
                        isVegetarian: { type: 'boolean', description: 'Vegetarian flag' },
                        calories: { type: 'integer', nullable: true, description: 'Calories' },
                        displayOrder: { type: 'integer', description: 'Display order' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['itemId', 'itemCode', 'itemName', 'categoryId', 'price', 'isAvailable', 'isActive', 'isVegetarian', 'displayOrder', 'createdAt', 'updatedAt'],
                },
                RestaurantTable: {
                    type: 'object',
                    properties: {
                        tableId: { type: 'integer', description: 'Unique table ID' },
                        tableNumber: { type: 'string', description: 'Table number' },
                        tableName: { type: 'string', nullable: true, description: 'Table name' },
                        capacity: { type: 'integer', description: 'Maximum capacity' },
                        minCapacity: { type: 'integer', description: 'Minimum capacity' },
                        floor: { type: 'integer', description: 'Floor number' },
                        section: { type: 'string', nullable: true, description: 'Section name' },
                        status: { $ref: '#/components/schemas/TableStatus' },
                        qrCode: { type: 'string', nullable: true, description: 'QR code' },
                        isActive: { type: 'boolean', description: 'Active status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['tableId', 'tableNumber', 'capacity', 'minCapacity', 'floor', 'status', 'isActive', 'createdAt', 'updatedAt'],
                },
                Reservation: {
                    type: 'object',
                    properties: {
                        reservationId: { type: 'integer', description: 'Unique reservation ID' },
                        reservationCode: { type: 'string', description: 'Reservation code' },
                        customerName: { type: 'string', description: 'Customer name' },
                        phoneNumber: { type: 'string', description: 'Phone number' },
                        email: { type: 'string', nullable: true, format: 'email', description: 'Email address' },
                        tableId: { type: 'integer', description: 'Table ID' },
                        reservationDate: { type: 'string', format: 'date', description: 'Reservation date' },
                        reservationTime: { type: 'string', format: 'date-time', description: 'Reservation time' },
                        duration: { type: 'integer', description: 'Duration in minutes' },
                        headCount: { type: 'integer', description: 'Number of guests' },
                        specialRequest: { type: 'string', nullable: true, description: 'Special requests' },
                        depositAmount: { type: 'number', format: 'decimal', nullable: true, description: 'Deposit amount' },
                        status: { $ref: '#/components/schemas/ReservationStatus' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['reservationId', 'reservationCode', 'customerName', 'phoneNumber', 'tableId', 'reservationDate', 'reservationTime', 'duration', 'headCount', 'status', 'createdAt', 'updatedAt'],
                },
                Order: {
                    type: 'object',
                    properties: {
                        orderId: { type: 'integer', description: 'Unique order ID' },
                        orderNumber: { type: 'string', description: 'Order number' },
                        tableId: { type: 'integer', description: 'Table ID' },
                        staffId: { type: 'integer', nullable: true, description: 'Staff ID (waiter)' },
                        reservationId: { type: 'integer', nullable: true, description: 'Reservation ID' },
                        customerName: { type: 'string', nullable: true, description: 'Customer name' },
                        customerPhone: { type: 'string', nullable: true, description: 'Customer phone' },
                        headCount: { type: 'integer', description: 'Number of guests' },
                        status: { $ref: '#/components/schemas/OrderStatus' },
                        notes: { type: 'string', nullable: true, description: 'Order notes' },
                        orderTime: { type: 'string', format: 'date-time', description: 'Order time' },
                        confirmedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Confirmation timestamp' },
                        completedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Completion timestamp' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['orderId', 'orderNumber', 'tableId', 'headCount', 'status', 'orderTime', 'createdAt', 'updatedAt'],
                },
                OrderItem: {
                    type: 'object',
                    properties: {
                        orderItemId: { type: 'integer', description: 'Unique order item ID' },
                        orderId: { type: 'integer', description: 'Order ID' },
                        itemId: { type: 'integer', description: 'Menu item ID' },
                        quantity: { type: 'integer', description: 'Quantity ordered' },
                        unitPrice: { type: 'number', format: 'decimal', description: 'Unit price' },
                        subtotal: { type: 'number', format: 'decimal', description: 'Subtotal' },
                        specialRequest: { type: 'string', nullable: true, description: 'Special request' },
                        status: { $ref: '#/components/schemas/OrderStatus' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['orderItemId', 'orderId', 'itemId', 'quantity', 'unitPrice', 'subtotal', 'status', 'createdAt', 'updatedAt'],
                },
                Bill: {
                    type: 'object',
                    properties: {
                        billId: { type: 'integer', description: 'Unique bill ID' },
                        billNumber: { type: 'string', description: 'Bill number' },
                        orderId: { type: 'integer', description: 'Order ID' },
                        tableId: { type: 'integer', description: 'Table ID' },
                        staffId: { type: 'integer', nullable: true, description: 'Staff ID (cashier)' },
                        subtotal: { type: 'number', format: 'decimal', description: 'Subtotal amount' },
                        taxAmount: { type: 'number', format: 'decimal', description: 'Tax amount' },
                        taxRate: { type: 'number', format: 'decimal', description: 'Tax rate' },
                        discountAmount: { type: 'number', format: 'decimal', description: 'Discount amount' },
                        serviceCharge: { type: 'number', format: 'decimal', description: 'Service charge' },
                        totalAmount: { type: 'number', format: 'decimal', description: 'Total amount' },
                        paidAmount: { type: 'number', format: 'decimal', description: 'Paid amount' },
                        changeAmount: { type: 'number', format: 'decimal', description: 'Change amount' },
                        paymentStatus: { $ref: '#/components/schemas/PaymentStatus' },
                        paymentMethod: { $ref: '#/components/schemas/PaymentMethod', nullable: true },
                        notes: { type: 'string', nullable: true, description: 'Bill notes' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        paidAt: { type: 'string', format: 'date-time', nullable: true, description: 'Payment timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['billId', 'billNumber', 'orderId', 'tableId', 'subtotal', 'taxAmount', 'taxRate', 'discountAmount', 'serviceCharge', 'totalAmount', 'paidAmount', 'changeAmount', 'paymentStatus', 'createdAt', 'updatedAt'],
                },
                KitchenOrder: {
                    type: 'object',
                    properties: {
                        kitchenOrderId: { type: 'integer', description: 'Unique kitchen order ID' },
                        orderId: { type: 'integer', description: 'Order ID' },
                        staffId: { type: 'integer', nullable: true, description: 'Staff ID (chef)' },
                        priority: { type: 'integer', description: 'Priority level' },
                        status: { $ref: '#/components/schemas/OrderStatus' },
                        startedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Start timestamp' },
                        completedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Completion timestamp' },
                        estimatedTime: { type: 'integer', nullable: true, description: 'Estimated time in minutes' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['kitchenOrderId', 'orderId', 'priority', 'status', 'createdAt', 'updatedAt'],
                },
                // Inventory Management Models
                IngredientCategory: {
                    type: 'object',
                    properties: {
                        categoryId: { type: 'integer', description: 'Unique category ID' },
                        categoryName: { type: 'string', description: 'Category name' },
                        description: { type: 'string', nullable: true, description: 'Category description' },
                        isActive: { type: 'boolean', description: 'Active status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['categoryId', 'categoryName', 'isActive', 'createdAt', 'updatedAt'],
                },
                Ingredient: {
                    type: 'object',
                    properties: {
                        ingredientId: { type: 'integer', description: 'Unique ingredient ID' },
                        ingredientCode: { type: 'string', description: 'Ingredient code' },
                        ingredientName: { type: 'string', description: 'Ingredient name' },
                        unit: { type: 'string', description: 'Unit of measurement' },
                        categoryId: { type: 'integer', nullable: true, description: 'Category ID' },
                        minimumStock: { type: 'number', format: 'decimal', description: 'Minimum stock level' },
                        currentStock: { type: 'number', format: 'decimal', description: 'Current stock level' },
                        unitCost: { type: 'number', format: 'decimal', nullable: true, description: 'Unit cost' },
                        isActive: { type: 'boolean', description: 'Active status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['ingredientId', 'ingredientCode', 'ingredientName', 'unit', 'minimumStock', 'currentStock', 'isActive', 'createdAt', 'updatedAt'],
                },
                Supplier: {
                    type: 'object',
                    properties: {
                        supplierId: { type: 'integer', description: 'Unique supplier ID' },
                        supplierCode: { type: 'string', description: 'Supplier code' },
                        supplierName: { type: 'string', description: 'Supplier name' },
                        contactPerson: { type: 'string', nullable: true, description: 'Contact person' },
                        phoneNumber: { type: 'string', nullable: true, description: 'Phone number' },
                        email: { type: 'string', nullable: true, format: 'email', description: 'Email address' },
                        address: { type: 'string', nullable: true, description: 'Address' },
                        taxCode: { type: 'string', nullable: true, description: 'Tax code' },
                        paymentTerms: { type: 'string', nullable: true, description: 'Payment terms' },
                        isActive: { type: 'boolean', description: 'Active status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['supplierId', 'supplierCode', 'supplierName', 'isActive', 'createdAt', 'updatedAt'],
                },
                PurchaseOrder: {
                    type: 'object',
                    properties: {
                        purchaseOrderId: { type: 'integer', description: 'Unique purchase order ID' },
                        orderNumber: { type: 'string', description: 'Order number' },
                        supplierId: { type: 'integer', description: 'Supplier ID' },
                        staffId: { type: 'integer', nullable: true, description: 'Staff ID' },
                        orderDate: { type: 'string', format: 'date-time', description: 'Order date' },
                        expectedDate: { type: 'string', format: 'date', nullable: true, description: 'Expected delivery date' },
                        receivedDate: { type: 'string', format: 'date-time', nullable: true, description: 'Received date' },
                        status: { $ref: '#/components/schemas/PurchaseOrderStatus' },
                        subtotal: { type: 'number', format: 'decimal', description: 'Subtotal amount' },
                        taxAmount: { type: 'number', format: 'decimal', description: 'Tax amount' },
                        totalAmount: { type: 'number', format: 'decimal', description: 'Total amount' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['purchaseOrderId', 'orderNumber', 'supplierId', 'orderDate', 'status', 'subtotal', 'taxAmount', 'totalAmount', 'createdAt', 'updatedAt'],
                },
                PurchaseOrderItem: {
                    type: 'object',
                    properties: {
                        itemId: { type: 'integer', description: 'Unique item ID' },
                        purchaseOrderId: { type: 'integer', description: 'Purchase order ID' },
                        ingredientId: { type: 'integer', description: 'Ingredient ID' },
                        quantity: { type: 'number', format: 'decimal', description: 'Quantity' },
                        unit: { type: 'string', description: 'Unit' },
                        unitPrice: { type: 'number', format: 'decimal', description: 'Unit price' },
                        subtotal: { type: 'number', format: 'decimal', description: 'Subtotal' },
                        receivedQuantity: { type: 'number', format: 'decimal', description: 'Received quantity' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                    },
                    required: ['itemId', 'purchaseOrderId', 'ingredientId', 'quantity', 'unit', 'unitPrice', 'subtotal', 'receivedQuantity', 'createdAt'],
                },
                StockTransaction: {
                    type: 'object',
                    properties: {
                        transactionId: { type: 'integer', description: 'Unique transaction ID' },
                        ingredientId: { type: 'integer', description: 'Ingredient ID' },
                        transactionType: { $ref: '#/components/schemas/TransactionType' },
                        quantity: { type: 'number', format: 'decimal', description: 'Quantity' },
                        unit: { type: 'string', description: 'Unit' },
                        referenceType: { type: 'string', nullable: true, description: 'Reference type' },
                        referenceId: { type: 'integer', nullable: true, description: 'Reference ID' },
                        staffId: { type: 'integer', nullable: true, description: 'Staff ID' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        transactionDate: { type: 'string', format: 'date-time', description: 'Transaction date' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                    },
                    required: ['transactionId', 'ingredientId', 'transactionType', 'quantity', 'unit', 'transactionDate', 'createdAt'],
                },
                IngredientBatch: {
                    type: 'object',
                    properties: {
                        batchId: { type: 'integer', description: 'Unique batch ID' },
                        ingredientId: { type: 'integer', description: 'Ingredient ID' },
                        purchaseOrderId: { type: 'integer', nullable: true, description: 'Purchase order ID' },
                        batchNumber: { type: 'string', description: 'Batch number' },
                        quantity: { type: 'number', format: 'decimal', description: 'Quantity' },
                        remainingQuantity: { type: 'number', format: 'decimal', description: 'Remaining quantity' },
                        unit: { type: 'string', description: 'Unit' },
                        unitCost: { type: 'number', format: 'decimal', nullable: true, description: 'Unit cost' },
                        expiryDate: { type: 'string', format: 'date', nullable: true, description: 'Expiry date' },
                        receivedDate: { type: 'string', format: 'date', description: 'Received date' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['batchId', 'ingredientId', 'batchNumber', 'quantity', 'remainingQuantity', 'unit', 'receivedDate', 'createdAt', 'updatedAt'],
                },
                StockAlert: {
                    type: 'object',
                    properties: {
                        alertId: { type: 'integer', description: 'Unique alert ID' },
                        ingredientId: { type: 'integer', description: 'Ingredient ID' },
                        alertType: { $ref: '#/components/schemas/StockAlertType' },
                        message: { type: 'string', description: 'Alert message' },
                        isResolved: { type: 'boolean', description: 'Resolved status' },
                        resolvedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Resolved timestamp' },
                        resolvedBy: { type: 'integer', nullable: true, description: 'Resolver staff ID' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                    },
                    required: ['alertId', 'ingredientId', 'alertType', 'message', 'isResolved', 'createdAt'],
                },
                Payment: {
                    type: 'object',
                    properties: {
                        paymentId: { type: 'integer', description: 'Unique payment ID' },
                        billId: { type: 'integer', description: 'Bill ID' },
                        paymentMethod: { $ref: '#/components/schemas/PaymentMethod' },
                        amount: { type: 'number', format: 'decimal', description: 'Payment amount' },
                        transactionId: { type: 'string', nullable: true, description: 'Transaction ID' },
                        cardNumber: { type: 'string', nullable: true, description: 'Card number (last 4 digits)' },
                        cardHolderName: { type: 'string', nullable: true, description: 'Card holder name' },
                        status: { $ref: '#/components/schemas/PaymentStatus' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        paymentDate: { type: 'string', format: 'date-time', description: 'Payment date' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                    },
                    required: ['paymentId', 'billId', 'paymentMethod', 'amount', 'status', 'paymentDate', 'createdAt'],
                },
                BillItem: {
                    type: 'object',
                    properties: {
                        billItemId: { type: 'integer', description: 'Unique bill item ID' },
                        billId: { type: 'integer', description: 'Bill ID' },
                        itemId: { type: 'integer', description: 'Menu item ID' },
                        itemName: { type: 'string', description: 'Item name' },
                        quantity: { type: 'integer', description: 'Quantity' },
                        unitPrice: { type: 'number', format: 'decimal', description: 'Unit price' },
                        subtotal: { type: 'number', format: 'decimal', description: 'Subtotal' },
                        discount: { type: 'number', format: 'decimal', description: 'Discount' },
                        total: { type: 'number', format: 'decimal', description: 'Total' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                    },
                    required: ['billItemId', 'billId', 'itemId', 'itemName', 'quantity', 'unitPrice', 'subtotal', 'discount', 'total', 'createdAt'],
                },
                Recipe: {
                    type: 'object',
                    properties: {
                        recipeId: { type: 'integer', description: 'Unique recipe ID' },
                        itemId: { type: 'integer', description: 'Menu item ID' },
                        ingredientId: { type: 'integer', description: 'Ingredient ID' },
                        quantity: { type: 'number', format: 'decimal', description: 'Quantity needed' },
                        unit: { type: 'string', description: 'Unit' },
                        notes: { type: 'string', nullable: true, description: 'Notes' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        updatedAt: { type: 'string', format: 'date-time', description: 'Update timestamp' },
                    },
                    required: ['recipeId', 'itemId', 'ingredientId', 'quantity', 'unit', 'createdAt', 'updatedAt'],
                },
                RefreshToken: {
                    type: 'object',
                    properties: {
                        tokenId: { type: 'integer', description: 'Unique token ID' },
                        accountId: { type: 'integer', description: 'Account ID' },
                        token: { type: 'string', description: 'Refresh token' },
                        expiresAt: { type: 'string', format: 'date-time', description: 'Expiration timestamp' },
                        deviceInfo: { type: 'string', nullable: true, description: 'Device information' },
                        ipAddress: { type: 'string', nullable: true, description: 'IP address' },
                        isRevoked: { type: 'boolean', description: 'Revoked status' },
                        createdAt: { type: 'string', format: 'date-time', description: 'Creation timestamp' },
                        revokedAt: { type: 'string', format: 'date-time', nullable: true, description: 'Revocation timestamp' },
                    },
                    required: ['tokenId', 'accountId', 'token', 'expiresAt', 'isRevoked', 'createdAt'],
                },
            },
            parameters: {
                pageParam: {
                    name: 'page',
                    in: 'query',
                    description: 'Page number for pagination',
                    required: false,
                    schema: {
                        type: 'integer',
                        minimum: 1,
                        default: 1,
                    },
                },
                limitParam: {
                    name: 'limit',
                    in: 'query',
                    description: 'Number of items per page',
                    required: false,
                    schema: {
                        type: 'integer',
                        minimum: 1,
                        maximum: 100,
                        default: 10,
                    },
                },
                sortByParam: {
                    name: 'sortBy',
                    in: 'query',
                    description: 'Field to sort by',
                    required: false,
                    schema: {
                        type: 'string',
                    },
                },
                sortOrderParam: {
                    name: 'sortOrder',
                    in: 'query',
                    description: 'Sort order',
                    required: false,
                    schema: {
                        type: 'string',
                        enum: ['asc', 'desc'],
                        default: 'asc',
                    },
                },
                statusParam: {
                    name: 'status',
                    in: 'query',
                    description: 'Filter by status',
                    required: false,
                    schema: {
                        type: 'string',
                    },
                },
                isActiveParam: {
                    name: 'isActive',
                    in: 'query',
                    description: 'Filter by active status',
                    required: false,
                    schema: {
                        type: 'boolean',
                    },
                },
                searchParam: {
                    name: 'search',
                    in: 'query',
                    description: 'Search query',
                    required: false,
                    schema: {
                        type: 'string',
                    },
                },
                dateFromParam: {
                    name: 'dateFrom',
                    in: 'query',
                    description: 'Filter from date',
                    required: false,
                    schema: {
                        type: 'string',
                        format: 'date',
                    },
                },
                dateToParam: {
                    name: 'dateTo',
                    in: 'query',
                    description: 'Filter to date',
                    required: false,
                    schema: {
                        type: 'string',
                        format: 'date',
                    },
                },
            },
        },
        security: [
            {
                bearerAuth: [],
            },
        ],
        tags: [
            { name: 'Authentication', description: 'Authentication endpoints' },
            { name: 'Menu', description: 'Menu management endpoints' },
            { name: 'Orders', description: 'Order management endpoints' },
            { name: 'Bills', description: 'Bill management endpoints' },
            { name: 'Reservations', description: 'Reservation management endpoints' },
            { name: 'Tables', description: 'Table management endpoints' },
            { name: 'Categories', description: 'Category management endpoints' },
            { name: 'Kitchen', description: 'Kitchen management endpoints' },
            { name: 'Payments', description: 'Payment management endpoints' },
            { name: 'Staff', description: 'Staff management endpoints' },
            { name: 'Ingredients', description: 'Ingredient management endpoints' },
            { name: 'Purchase', description: 'Purchase order management endpoints' },
            { name: 'Stock', description: 'Stock management endpoints' },
        ],
    },
    apis: [
        './src/features/**/*.routes.ts',
    ],
};

export const swaggerSpec = swaggerJsdoc(swaggerOptions);
